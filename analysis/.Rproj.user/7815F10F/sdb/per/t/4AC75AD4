{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Process OutFLANK\"\nauthor: \"Katie Lotterhos\"\ndate: \"July 17, 2017\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n```{r install}\n # install.packages(\"devtools\")\n  library(devtools)\n#  source(\"http://bioconductor.org/biocLite.R\")\n#  biocLite(\"qvalue\")\n#  install_github(\"whitlock/OutFLANK\")\n  library(OutFLANK)\n  if(!(\"adegenet\" %in% installed.packages())){install.packages(\"adegenet\")}\n\nlibrary(vcfR)\nlibrary(adegenet)\n  library(pcadapt)\n```\n\n\n```{r make Genotypes}\n  \n### Read in edited VCF file and convert to outFLANK format \n#setwd(\"sim1a\")\nfile <- (\"VCFallsim1.vcf\")\nind <- read.table(\"outputIndAll.txt\", header=TRUE)\n\n##file <- (\"sim1/VCFsim1\")\n##ind <- read.table(\"outputInd.txt\", header=TRUE)\n\nvcf <- read.vcfR(file)\n\nmuts <- read.table(\"outputMuts.txt\", header=TRUE)\nmuts$position <- muts$position +1\nmuts$pa2 <- round(muts$selCoef^2*muts$freq*(1-muts$freq),3)\nmuts$prop <- muts$pa2/sum(muts$pa2)\nwhich(duplicated(muts$position))\n\nmuts$count <- FALSE\nmuts$count[muts$prop>=0.01] <- TRUE\nmuts$count[muts$type==\"m4\" & muts$freq > 0.05] <- TRUE\n\nmuts\n\nwrite.table(muts, \"OutputMuts_Detail.txt\", row.names=FALSE, col.names=TRUE)\n\nwrite.table(muts$position[muts$count], \"Sim1a_Contest_SNPS.txt\",row.names=FALSE, col.names=FALSE)\nwrite.table(cbind(muts$position[muts$count]-100, muts$position[muts$count]+100), \"Sim1a_Contest_Regions.txt\",row.names=FALSE, col.names=FALSE)\n\n### Explore the data\nhead(vcf)\nstr(vcf)\nvcf@meta\nhead(vcf@fix)\nhead(vcf@gt)\n\nMT <- extract.info(vcf, element=\"MT\", as.numeric=TRUE)\ntable(MT) ## in data\ntable(muts$type) ## in sims\n  \n convertVCFtoCount <- function(string){\n    # This function assumes 0 for reference\n    # and 1 for alternate allele\n    sum(as.numeric(unlist(strsplit(string,split = c(\"[|///]\")))))\n }\n  system.time(convertVCFtoCount(\"1|1\"))\n \n  all.vcf.gen <- as.vector(vcf@gt[,-1])\n  system.time(\n  gen_table <- matrix(sapply(all.vcf.gen,  # oh gosh this is slow!\n                             convertVCFtoCount), \n                             nrow(vcf@gt))\n  )\n  \n  colnames(gen_table) <- colnames(vcf@gt)[-1]\n  rownames(gen_table) <- apply(vcf@fix[,c(\"CHROM\", \"POS\")], 1, \n                          function(x){paste(x, collapse =\"_\")})\n  \n  dim(vcf@gt)\n  dim(gen_table)\n  \n  head(cbind(vcf@fix[MT==2,], vcf@gt[MT==2,1:10], gen_table[MT==2,1:10]))\n  \n\n  dim(ind)\n  dim(gen_table)\n  colnames(gen_table) <- ind$id\n  \n  S <- extract.info(vcf, element=\"S\", as.numeric=TRUE)\n  phen_check = colSums(S[MT==2]*gen_table[MT==2,])\n  \n  dim(ind)\n  plot(ind$phenotype1,phen_check)\n  \n  ### optional assignment to pops\n  toclust <- ind[,c(\"x\",\"y\")]\n  d <- dist(toclust)\n  hc <- hclust(d, method=\"ward.D\")\n  #fit <- kmeans(toclust, 30) \n  #plot(ind$x, ind$y, pch=fit$cluster, col=fit$cluster+1)\n  k <- 39\n  groups <- cutree(hc, k=k)\n  plot(ind$x, ind$y, pch=groups%%6, col=adjustcolor(groups%%3+2, alpha=0.2))\n    text(tapply(ind$x, groups, mean), tapply(ind$y, groups, mean), label=1:k)\n  \n  ind$pop <- groups\n  \n  table(ind$pop)\n  \n  popNames <- ind$pop\n  table(popNames)\n  length(table(popNames))\n  \n  write.table(ind, \"outputIndAll_pop.txt\")\n```\n\n\nQuick eval of number of SNPs around selected regions\n```{r, eval=FALSE, echo=FALSE}\npos <- sort(as.numeric(vcf@fix[,\"POS\"]))\nloc <- 81730\ncond <- pos > (loc-100) & pos < (loc+100) #81730\npos[cond]\n\nloc <- 27702\ncond <- pos > (loc-100) & pos < (loc+100) \npos[cond]\n\nloc <- 21929 \ncond <- pos > (loc-100) & pos < (loc+100) \npos[cond]\n\nloc <- 186395\ncond <- pos > (loc-100) & pos < (loc+100) \npos[cond]\n\n\n```\n\n```{r GEAs, fig.width=8, fig.height=4}\ntopm2_vcf <- which(vcf@fix[,\"POS\"] %in% muts$position[muts$count])\nsort(as.numeric(vcf@fix[topm2_vcf,\"POS\"]))\ntopm2 <- muts$count\n\nhead(gen_table[,1:10])\ndim(gen_table)\n\nhead(ind)\ndim(ind)\n\ncor(ind$envi, ind$phenotype1)\n\ndim(ind)\ndim(gen_table)\nrem = which(apply(gen_table, 1, function(x){nlevels(as.factor(x))})==1)\n\nvcf@fix[rem,] # a fixed selected locus\n\nPOS <- vcf@fix[,\"POS\"]\n\npar(mfrow=c(2,1))\nenv_cor <- apply(gen_table, 1 , function(x){\n    if (nlevels(as.factor(x))>1){ \n      cor(x, ind$envi, method = \"spearman\")\n    }else{\n      NA\n    }\n})\n\n\nplot(POS, abs(env_cor), col=\"grey\", pch=20)\n  points(POS[topm2_vcf], abs(env_cor)[topm2_vcf], col=\"blue\")\n  abline(v=muts$position[topm2],  col=\"blue\")\n\nplot(muts$prop[topm2], abs(env_cor)[topm2_vcf])\n \nphen_cor <- apply(gen_table, 1 , function(x){\n    if (nlevels(as.factor(x))>1){ \n      cor(x, ind$phenotype1, method = \"spearman\")\n    }else{\n      NA\n    }\n})\nplot(POS, abs(phen_cor), col=\"grey\", pch=20)\n  points(POS[topm2_vcf], abs(phen_cor)[topm2_vcf], col=\"blue\")\n  abline(v=muts$position[topm2],  col=\"blue\")  \n\n  plot(muts$prop[topm2], abs(phen_cor)[topm2_vcf])\n  \nplot(phen_cor, env_cor)\n```\n\n\n\n```{r run Outflank}\n  locusNames <- rownames(gen_table)\n  dipmat <- MakeDiploidFSTMat(t(gen_table), locusNames, popNames)\n  \n  head(dipmat)\n  hist(dipmat$FST, breaks=100)\n  hist(dipmat$He[dipmat$He>0.1])\n  \n  plot(dipmat$FST, dipmat$FSTNoCorr)\n  hist(dipmat$FSTNoCorr-dipmat$FST, breaks=100)\n  \n  plot(dipmat$He, dipmat$FST, pch=20, col=\"grey\")\n  \n  hist(dipmat$FSTNoCorr, breaks=seq(0,0.3, by=0.001))\n  hist(dipmat$FSTNoCorr[dipmat$He>0.05], breaks=seq(0,0.3, by=0.001))\n  hist(dipmat$FSTNoCorr[dipmat$He>0.1], breaks=seq(0,0.3, by=0.001))\n  \n  \n  quantile(dipmat$FSTNoCor, probs = c(0.99, 0.95, 0.9, 0.85), na.rm=TRUE)\n  quantile(dipmat$FSTNoCor, probs = c(0.05, 0.1, 0.15, 0.2, 0.3, 0.4), na.rm=TRUE)\n  \n  outlier = OutFLANK(dipmat,NumberOfSamples = k)\n    # this error means that the chi-square dist isn't fitting well\n    OutFLANKResultsPlotter(outlier, withOutliers = TRUE,\nNoCorr = TRUE, Hmin = 0.1, binwidth = 0.001, Zoom =\nFALSE, RightZoomFraction = 0.05, titletext = NULL)\n    \n  outlier = OutFLANK(dipmat,NumberOfSamples = k, \n                     RightTrimFraction = 0.05, LeftTrimFraction = 0.4,\n                     qthreshold = 0.05, Hmin = 0.1)\n    # increasing the Right Trim Fraction doesn't help\n  OutFLANKResultsPlotter(outlier, withOutliers = TRUE,\nNoCorr = TRUE, Hmin = 0.1, binwidth = 0.001, Zoom =\nFALSE, RightZoomFraction = 0.05, titletext = NULL)\n  hist(outlier$results$pvaluesRightTail)\n  hist(outlier$results$qvalues)\n  \n  str(outlier)\n  sum(outlier$results$pvaluesRightTail < 0.001, na.rm=TRUE)\n  sum(outlier$results$qvalues<0.01, na.rm=TRUE)\n```\n\n\n```{r eval OutFLANK}\n\n  head(outlier$results)\n  head(vcf@fix)\n  plot(dipmat$He, dipmat$FST, pch=20, col=\"grey\")\n    points(dipmat$He[topm2_vcf], dipmat$FST[topm2_vcf], pch=21, col=\"blue\")\n    #points(POS[topm2_vcf], abs(phen_cor)[topm2_vcf], col=\"blue\")\n  \n  plot(POS, dipmat$FST, col=\"grey\", pch=20)\n    points(POS[topm2_vcf], dipmat$FST[topm2_vcf], pch=21, col=\"blue\")\n        abline(v=muts$position[topm2],  col=\"blue\")  \n    points(POS[MT==3], dipmat$FST[MT==3], pch=22, col=\"red\") \n    points(POS[outlier$results$OutlierFlag>0], dipmat$FST[outlier$results$OutlierFlag>0], pch=21, col=\"lightblue\", cex=2)\n    \n  plot(POS, dipmat$He, col=adjustcolor(\"grey\", alpha.f=0.2), pch=20)\n    points(POS[topm2_vcf], dipmat$He[topm2_vcf], pch=21, col=\"blue\")\n    abline(v=muts$position[topm2],  col=\"blue\") \n    points(POS[MT==3], dipmat$He[MT==3], pch=22, col=\"red\")\n    points(POS[MT==4], dipmat$He[MT==4], pch=23, col=\"green\")\n    abline(v=muts$position[muts$type==\"m4\"],  col=\"green\")\n  \n  plot(abs(S[topm2_vcf]), dipmat$FST[topm2_vcf])\n  plot(muts$prop[topm2], dipmat$FST[topm2_vcf])\n\n  plot(POS, -log10(outlier$results$pvaluesRightTail), col='grey')\n      points(POS[topm2_vcf], -log10(outlier$results$pvaluesRightTail[topm2_vcf]), pch=21, col=\"blue\")\n          abline(v=muts$position[topm2],  col=\"blue\") \n      \n```\n\n\n```{r PCADAPT}\ngenotype_file <- tempfile()\nwrite.table(x = gen_table, # transposing the genotype matrix with t()\n            file = genotype_file, \n            sep = \" \", \n            col.names = FALSE, \n            row.names = FALSE)\nK <- 35\nx <- pcadapt(genotype_file, K = K)\nplot(x, option = \"screeplot\")\nplot(x, option = \"scores\", pop = ind$pop)\nstr(x)\n\nK <- 5\ndim(gen_table)\nx <- pcadapt(genotype_file, K = K, min.maf = 0.01)\nsummary(x)\nplot(x, option = \"qqplot\", threshold = 0.05)\n#plot(x, option = \"stat.distribution\")\n\npar(mfrow=c(1,1))\nplot(POS, x$chi2.stat, col=\"grey\", pch=20)\n  points(POS[topm2_vcf], x$chi2.stat[topm2_vcf], col=\"blue\", pch=21)\n           abline(v=muts$position[topm2],  col=\"blue\") \n  points(POS[MT==3], x$chi2.stat[MT==3], col=\"red\", pch=22)\n  points(POS[MT==4], x$chi2.stat[MT==4], col=\"green\", pch=22, cex=2)\n  abline(v=muts$position[muts$type==\"m4\"],  col=\"green\")\n  \nplot(POS, log10(x$chi2.stat), col=\"grey\", pch=20)\n  points(POS[topm2_vcf], log10(x$chi2.stat[topm2_vcf]), col=\"blue\", pch=21)\n           abline(v=muts$position[topm2],  col=\"blue\") \n  points(POS[MT==3], log10(x$chi2.stat[MT==3]), col=\"red\", pch=22)\n  points(POS[MT==4], log10(x$chi2.stat[MT==4]), col=\"green\", pch=22, cex=2)\n    abline(v=muts$position[muts$type==\"m4\"],  col=\"green\")\n\nqval <- qvalue(x$pvalues)$qvalues\nplot(POS, -log10(qval), col=\"grey\", pch=20)\n  points(POS[topm2_vcf], -log10(qval)[topm2_vcf], col=\"blue\", pch=21)\n   abline(v=muts$position[topm2],  col=\"blue\") \n  points(POS[MT==3], -log10(qval)[MT==3], col=\"red\", pch=22)\n  points(POS[MT==4], x$chi2.stat[MT==4], col=\"green\", pch=22, cex=2)\n  \n\nplot(POS, -log10(x$pvalues), col=\"grey\", pch=20)\n  points(POS[topm2_vcf], -log10(x$pvalues)[topm2_vcf], col=\"blue\", pch=21)\n     abline(v=muts$position[topm2],  col=\"blue\") \n  points(POS[MT==3], -log10(x$pvalues)[MT==3], col=\"red\", pch=22)\n  points(POS[MT==4], x$pvalues[MT==4], col=\"green\", pch=22, cex=2)\n\n\nalpha <- 0.05\noutliers_pcadapt <- which(qval < alpha)\nprint(outliers_pcadapt)\n```\n\n```{r output edited VCF}\n\n##TO DO: output an edited VCF File without loci information\n##output a list of causal mutations and their info including allele freq, suggest ones to use for contest\n\n ### Replace chromsome 1 with actual chromosome positions\n  ends=c(1, 40001, 80001, 120001, 160001, 200000, 240000)\n  vcf2 <- vcf\n  vcf2@fix[,\"CHROM\"] <- NA\n  POS <- as.numeric(vcf2@fix[,\"POS\"])\n\n  for (i in 1:(length(ends)-1)){\n    cond <- POS >= ends[i] &  POS < ends[i+1]\n    print(c(ends[i], ends[i+1], sum(cond)))\n    vcf2@fix[cond,\"CHROM\"] = i\n  }\n  table(vcf2@fix[,\"CHROM\"])\n\n  head(vcf2@fix)\n  tail(vcf2@fix)\n  \n  vcf3 <- vcf2\n  vcf3@fix[,\"INFO\"] <- NA\n  head(vcf3@fix)\n  dim(vcf3@gt)\n  colnames(vcf3@gt)\n  write.vcf(vcf3,\"vcf_sim1a_contest.vcf.gz\")\n```\n\n\n\n\n\n```{r other_progs, eval=FALSE}\n\n### Convert to gen_ind object\n  vcf3 <- read.vcfR(\"sim1/vcf2.vcf.gz\")\n  my_genind <- vcfR2genind(vcf3)\n  my_genind\n  str(my_genind)\n  str(my_genind@loc.fac)\n  str(my_genind@loc.n.all)\n  ### Genotype format\n  head(my_genind@tab[,1:10])\n  lapply()\n  \n  my_pops <- read.table(\"sim1/outputInd.txt\", header=TRUE)\n  head(my_pops)\n  par(mar=c(4,4,0,0))\n  plot(my_pops$phenotype ~ my_pops$envi)\n  cor(my_pops$phenotype, my_pops$envi)\n  \n  dim(my_pops)\n  dim(my_genind@tab)\n  my_genind@pop = as.factor(my_pops$pop)\n    # has to be factor to be assigned\n  \n  ## Number of alleles per locus\n  nal <- nAll(my_genind)\n    # need to remove fixed alleles\n  locs_filt <- my_genind@tab[,nal>0]\n  dim(locs_filt)\n  \n    \n    \n    \n    \n    \n    \n### Convert vcf2 to genlight object\n  x <- vcfR2genlight(vcf2)\n  str(x)\n  head(x)\n  x@gen\n\n### Convert to pegas loci object   \n  my_loci <- vcfR2loci(vcf) \n  str(my_loci)\n  head(my_loci)\n  tail(my_loci)\n  print(my_loci)\n  dim(my_loci)\n  head(my_loci[,1:10])\n  str(my_loci[,2])\n  \n\n```",
    "created" : 1502287816330.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3243715733",
    "id" : "4AC75AD4",
    "lastKnownWriteTime" : 1501723568,
    "last_content_update" : 1501723568,
    "path" : "~/Dropbox/katie/SSMPG2017/SSMPG2017/sim1a/evalOutFLANK_PCAdapt.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}